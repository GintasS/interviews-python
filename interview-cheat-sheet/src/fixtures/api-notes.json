{
  "rest_methods": [
    {
      "name": "POST",
      "description": "Create"
    },
    {
      "name": "GET",
      "description": "Read"
    },
    {
      "name": "PUT",
      "description": "Update"
    },
    {
      "name": "PATCH",
      "description": "Specific-Update"
    },
    {
      "name": "DELETE",
      "description": "Delete"
    }
  ],
  "rest_constraints": [
    {
      "name": "Client-Server (Decoupling)",
      "description": "Separation of concerns between the client and server, allowing them to evolve independently and improve scalability, reliability, and portability."
    },
    {
      "name": "Stateless",
      "description": "Each request from the client to the server must contain all the information necessary to understand and fulfill the request, meaning no client context is stored on the server between requests."
    },
    {
      "name": "Cacheability",
      "description": "Responses must define themselves as cacheable or non-cacheable, improving efficiency, scalability, and user-perceived performance through the use of caching."
    },
    {
      "name": "Uniform Interface",
      "description": "A uniform and standardized way of interacting with resources through well-defined operations (HTTP methods) and resource representations (media types)."
    },
    {
      "name": "Layered System",
      "description": "A hierarchical system where intermediaries (proxies, gateways, etc.) can be used to improve scalability, security, and encapsulation by providing additional layers of abstraction."
    },
    {
      "name": "Code-On-Demand (Optional)",
      "description": "Servers can temporarily extend the functionality of a client by transferring executable code (e.g., JavaScript) within a response, enhancing flexibility and reducing client-server coupling."
    }
  ],
  "graphql": [
    {
      "name": "Schema",
      "description": "Defines the structure of the data in the GraphQL API, including types, fields, and relationships."
    },
    {
      "name": "Query",
      "description": "Defines how clients can fetch data from the GraphQL server. Queries are used to retrieve data from the server."
    },
    {
      "name": "Mutation",
      "description": "Defines how clients can modify data on the GraphQL server. Mutations are used to create, update, or delete data."
    },
    {
      "name": "Subscription",
      "description": "Defines how clients can subscribe to real-time data updates from the GraphQL server. Subscriptions allow clients to receive data as it changes."
    },
    {
      "name": "Resolver",
      "description": "Functions that define how GraphQL fields are resolved. Resolvers are responsible for fetching the data associated with each field."
    },
    {
      "name": "Scalar",
      "description": "Primitive data types in GraphQL that represent single values, such as integers, strings, booleans, and floats."
    },
    {
      "name": "Type",
      "description": "Composite data types in GraphQL that represent complex objects with multiple fields. Object types define the structure of the data returned by queries and mutations."
    },
    {
      "name": "Input",
      "description": "Similar to object types, input types represent complex input data for mutations. Input types define the structure of the data that clients can provide when executing mutations."
    },
    {
      "name": "Enum",
      "description": "An enumeration type in GraphQL that represents a predefined set of possible values. Enums are used to define a specific domain of valid options for a field."
    },
    {
      "name": "Union",
      "description": "A type in GraphQL that represents a combination of one or more object types. Unions allow for flexibility in query responses by allowing a field to return different types of objects."
    },
    {
      "name": "Interface",
      "description": "A type in GraphQL that defines a common set of fields that multiple object types can implement. Interfaces enable polymorphism and ensure consistent field structures across related types."
    }
  ]
}
