(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const l of s.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&r(l)}).observe(document,{childList:!0,subtree:!0});function i(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerPolicy&&(s.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?s.credentials="include":o.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(o){if(o.ep)return;o.ep=!0;const s=i(o);fetch(o.href,s)}})();var X,f,je,He,D,Ce,Be,ae,fe,le,ce,j={},Ue=[],at=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,_e=Array.isArray;function R(t,e){for(var i in e)t[i]=e[i];return t}function Ve(t){var e=t.parentNode;e&&e.removeChild(t)}function lt(t,e,i){var r,o,s,l={};for(s in e)s=="key"?r=e[s]:s=="ref"?o=e[s]:l[s]=e[s];if(arguments.length>2&&(l.children=arguments.length>3?X.call(arguments,2):i),typeof t=="function"&&t.defaultProps!=null)for(s in t.defaultProps)l[s]===void 0&&(l[s]=t.defaultProps[s]);return Q(t,l,r,o,null)}function Q(t,e,i,r,o){var s={type:t,props:e,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:o??++je,__i:-1,__u:0};return o==null&&f.vnode!=null&&f.vnode(s),s}function O(t){return t.children}function F(t,e){this.props=t,this.context=e}function A(t,e){if(e==null)return t.__?A(t.__,t.__i+1):null;for(var i;e<t.__k.length;e++)if((i=t.__k[e])!=null&&i.__e!=null)return i.__e;return typeof t.type=="function"?A(t):null}function Ge(t){var e,i;if((t=t.__)!=null&&t.__c!=null){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if((i=t.__k[e])!=null&&i.__e!=null){t.__e=t.__c.base=i.__e;break}return Ge(t)}}function ke(t){(!t.__d&&(t.__d=!0)&&D.push(t)&&!J.__r++||Ce!==f.debounceRendering)&&((Ce=f.debounceRendering)||Be)(J)}function J(){var t,e,i,r,o,s,l,c;for(D.sort(ae);t=D.shift();)t.__d&&(e=D.length,r=void 0,s=(o=(i=t).__v).__e,l=[],c=[],i.__P&&((r=R({},o)).__v=o.__v+1,f.vnode&&f.vnode(r),ge(i.__P,r,o,i.__n,i.__P.ownerSVGElement!==void 0,32&o.__u?[s]:null,l,s??A(o),!!(32&o.__u),c),r.__v=o.__v,r.__.__k[r.__i]=r,We(l,r,c),r.__e!=s&&Ge(r)),D.length>e&&D.sort(ae));J.__r=0}function Qe(t,e,i,r,o,s,l,c,h,d,u){var a,S,p,v,T,y=r&&r.__k||Ue,_=e.length;for(i.__d=h,ct(i,e,y),h=i.__d,a=0;a<_;a++)(p=i.__k[a])!=null&&typeof p!="boolean"&&typeof p!="function"&&(S=p.__i===-1?j:y[p.__i]||j,p.__i=a,ge(t,p,S,o,s,l,c,h,d,u),v=p.__e,p.ref&&S.ref!=p.ref&&(S.ref&&be(S.ref,null,p),u.push(p.ref,p.__c||v,p)),T==null&&v!=null&&(T=v),65536&p.__u||S.__k===p.__k?(h&&!h.isConnected&&(h=A(S)),h=ze(p,h,t)):typeof p.type=="function"&&p.__d!==void 0?h=p.__d:v&&(h=v.nextSibling),p.__d=void 0,p.__u&=-196609);i.__d=h,i.__e=T}function ct(t,e,i){var r,o,s,l,c,h=e.length,d=i.length,u=d,a=0;for(t.__k=[],r=0;r<h;r++)l=r+a,(o=t.__k[r]=(o=e[r])==null||typeof o=="boolean"||typeof o=="function"?null:typeof o=="string"||typeof o=="number"||typeof o=="bigint"||o.constructor==String?Q(null,o,null,null,null):_e(o)?Q(O,{children:o},null,null,null):o.constructor===void 0&&o.__b>0?Q(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o)!=null?(o.__=t,o.__b=t.__b+1,c=dt(o,i,l,u),o.__i=c,s=null,c!==-1&&(u--,(s=i[c])&&(s.__u|=131072)),s==null||s.__v===null?(c==-1&&a--,typeof o.type!="function"&&(o.__u|=65536)):c!==l&&(c===l+1?a++:c>l?u>h-l?a+=c-l:a--:c<l?c==l-1&&(a=c-l):a=0,c!==r+a&&(o.__u|=65536))):(s=i[l])&&s.key==null&&s.__e&&!(131072&s.__u)&&(s.__e==t.__d&&(t.__d=A(s)),de(s,s,!1),i[l]=null,u--);if(u)for(r=0;r<d;r++)(s=i[r])!=null&&!(131072&s.__u)&&(s.__e==t.__d&&(t.__d=A(s)),de(s,s))}function ze(t,e,i){var r,o;if(typeof t.type=="function"){for(r=t.__k,o=0;r&&o<r.length;o++)r[o]&&(r[o].__=t,e=ze(r[o],e,i));return e}t.__e!=e&&(i.insertBefore(t.__e,e||null),e=t.__e);do e=e&&e.nextSibling;while(e!=null&&e.nodeType===8);return e}function dt(t,e,i,r){var o=t.key,s=t.type,l=i-1,c=i+1,h=e[i];if(h===null||h&&o==h.key&&s===h.type&&!(131072&h.__u))return i;if(r>(h!=null&&!(131072&h.__u)?1:0))for(;l>=0||c<e.length;){if(l>=0){if((h=e[l])&&!(131072&h.__u)&&o==h.key&&s===h.type)return l;l--}if(c<e.length){if((h=e[c])&&!(131072&h.__u)&&o==h.key&&s===h.type)return c;c++}}return-1}function Te(t,e,i){e[0]==="-"?t.setProperty(e,i??""):t[e]=i==null?"":typeof i!="number"||at.test(e)?i:i+"px"}function G(t,e,i,r,o){var s;e:if(e==="style")if(typeof i=="string")t.style.cssText=i;else{if(typeof r=="string"&&(t.style.cssText=r=""),r)for(e in r)i&&e in i||Te(t.style,e,"");if(i)for(e in i)r&&i[e]===r[e]||Te(t.style,e,i[e])}else if(e[0]==="o"&&e[1]==="n")s=e!==(e=e.replace(/(PointerCapture)$|Capture$/i,"$1")),e=e.toLowerCase()in t||e==="onFocusOut"||e==="onFocusIn"?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+s]=i,i?r?i.u=r.u:(i.u=fe,t.addEventListener(e,s?ce:le,s)):t.removeEventListener(e,s?ce:le,s);else{if(o)e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(e!="width"&&e!="height"&&e!="href"&&e!="list"&&e!="form"&&e!="tabIndex"&&e!="download"&&e!="rowSpan"&&e!="colSpan"&&e!="role"&&e in t)try{t[e]=i??"";break e}catch{}typeof i=="function"||(i==null||i===!1&&e[4]!=="-"?t.removeAttribute(e):t.setAttribute(e,i))}}function Ee(t){return function(e){if(this.l){var i=this.l[e.type+t];if(e.t==null)e.t=fe++;else if(e.t<i.u)return;return i(f.event?f.event(e):e)}}}function ge(t,e,i,r,o,s,l,c,h,d){var u,a,S,p,v,T,y,_,w,E,B,$,Se,U,ie,k=e.type;if(e.constructor!==void 0)return null;128&i.__u&&(h=!!(32&i.__u),s=[c=e.__e=i.__e]),(u=f.__b)&&u(e);e:if(typeof k=="function")try{if(_=e.props,w=(u=k.contextType)&&r[u.__c],E=u?w?w.props.value:u.__:r,i.__c?y=(a=e.__c=i.__c).__=a.__E:("prototype"in k&&k.prototype.render?e.__c=a=new k(_,E):(e.__c=a=new F(_,E),a.constructor=k,a.render=pt),w&&w.sub(a),a.props=_,a.state||(a.state={}),a.context=E,a.__n=r,S=a.__d=!0,a.__h=[],a._sb=[]),a.__s==null&&(a.__s=a.state),k.getDerivedStateFromProps!=null&&(a.__s==a.state&&(a.__s=R({},a.__s)),R(a.__s,k.getDerivedStateFromProps(_,a.__s))),p=a.props,v=a.state,a.__v=e,S)k.getDerivedStateFromProps==null&&a.componentWillMount!=null&&a.componentWillMount(),a.componentDidMount!=null&&a.__h.push(a.componentDidMount);else{if(k.getDerivedStateFromProps==null&&_!==p&&a.componentWillReceiveProps!=null&&a.componentWillReceiveProps(_,E),!a.__e&&(a.shouldComponentUpdate!=null&&a.shouldComponentUpdate(_,a.__s,E)===!1||e.__v===i.__v)){for(e.__v!==i.__v&&(a.props=_,a.state=a.__s,a.__d=!1),e.__e=i.__e,e.__k=i.__k,e.__k.forEach(function(V){V&&(V.__=e)}),B=0;B<a._sb.length;B++)a.__h.push(a._sb[B]);a._sb=[],a.__h.length&&l.push(a);break e}a.componentWillUpdate!=null&&a.componentWillUpdate(_,a.__s,E),a.componentDidUpdate!=null&&a.__h.push(function(){a.componentDidUpdate(p,v,T)})}if(a.context=E,a.props=_,a.__P=t,a.__e=!1,$=f.__r,Se=0,"prototype"in k&&k.prototype.render){for(a.state=a.__s,a.__d=!1,$&&$(e),u=a.render(a.props,a.state,a.context),U=0;U<a._sb.length;U++)a.__h.push(a._sb[U]);a._sb=[]}else do a.__d=!1,$&&$(e),u=a.render(a.props,a.state,a.context),a.state=a.__s;while(a.__d&&++Se<25);a.state=a.__s,a.getChildContext!=null&&(r=R(R({},r),a.getChildContext())),S||a.getSnapshotBeforeUpdate==null||(T=a.getSnapshotBeforeUpdate(p,v)),Qe(t,_e(ie=u!=null&&u.type===O&&u.key==null?u.props.children:u)?ie:[ie],e,i,r,o,s,l,c,h,d),a.base=e.__e,e.__u&=-161,a.__h.length&&l.push(a),y&&(a.__E=a.__=null)}catch(V){e.__v=null,h||s!=null?(e.__e=c,e.__u|=h?160:32,s[s.indexOf(c)]=null):(e.__e=i.__e,e.__k=i.__k),f.__e(V,e,i)}else s==null&&e.__v===i.__v?(e.__k=i.__k,e.__e=i.__e):e.__e=ht(i.__e,e,i,r,o,s,l,h,d);(u=f.diffed)&&u(e)}function We(t,e,i){e.__d=void 0;for(var r=0;r<i.length;r++)be(i[r],i[++r],i[++r]);f.__c&&f.__c(e,t),t.some(function(o){try{t=o.__h,o.__h=[],t.some(function(s){s.call(o)})}catch(s){f.__e(s,o.__v)}})}function ht(t,e,i,r,o,s,l,c,h){var d,u,a,S,p,v,T,y=i.props,_=e.props,w=e.type;if(w==="svg"&&(o=!0),s!=null){for(d=0;d<s.length;d++)if((p=s[d])&&"setAttribute"in p==!!w&&(w?p.localName===w:p.nodeType===3)){t=p,s[d]=null;break}}if(t==null){if(w===null)return document.createTextNode(_);t=o?document.createElementNS("http://www.w3.org/2000/svg",w):document.createElement(w,_.is&&_),s=null,c=!1}if(w===null)y===_||c&&t.data===_||(t.data=_);else{if(s=s&&X.call(t.childNodes),y=i.props||j,!c&&s!=null)for(y={},d=0;d<t.attributes.length;d++)y[(p=t.attributes[d]).name]=p.value;for(d in y)p=y[d],d=="children"||(d=="dangerouslySetInnerHTML"?a=p:d==="key"||d in _||G(t,d,null,p,o));for(d in _)p=_[d],d=="children"?S=p:d=="dangerouslySetInnerHTML"?u=p:d=="value"?v=p:d=="checked"?T=p:d==="key"||c&&typeof p!="function"||y[d]===p||G(t,d,p,y[d],o);if(u)c||a&&(u.__html===a.__html||u.__html===t.innerHTML)||(t.innerHTML=u.__html),e.__k=[];else if(a&&(t.innerHTML=""),Qe(t,_e(S)?S:[S],e,i,r,o&&w!=="foreignObject",s,l,s?s[0]:i.__k&&A(i,0),c,h),s!=null)for(d=s.length;d--;)s[d]!=null&&Ve(s[d]);c||(d="value",v!==void 0&&(v!==t[d]||w==="progress"&&!v||w==="option"&&v!==y[d])&&G(t,d,v,y[d],!1),d="checked",T!==void 0&&T!==t[d]&&G(t,d,T,y[d],!1))}return t}function be(t,e,i){try{typeof t=="function"?t(e):t.current=e}catch(r){f.__e(r,i)}}function de(t,e,i){var r,o;if(f.unmount&&f.unmount(t),(r=t.ref)&&(r.current&&r.current!==t.__e||be(r,null,e)),(r=t.__c)!=null){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(s){f.__e(s,e)}r.base=r.__P=null}if(r=t.__k)for(o=0;o<r.length;o++)r[o]&&de(r[o],e,i||typeof t.type!="function");i||t.__e==null||Ve(t.__e),t.__c=t.__=t.__e=t.__d=void 0}function pt(t,e,i){return this.constructor(t,i)}function ut(t,e,i){var r,o,s,l;f.__&&f.__(t,e),o=(r=typeof i=="function")?null:e.__k,s=[],l=[],ge(e,t=(!r&&i||e).__k=lt(O,null,[t]),o||j,j,e.ownerSVGElement!==void 0,!r&&i?[i]:o?null:e.firstChild?X.call(e.childNodes):null,s,!r&&i?i:o?o.__e:e.firstChild,r,l),We(s,t,l)}X=Ue.slice,f={__e:function(t,e,i,r){for(var o,s,l;e=e.__;)if((o=e.__c)&&!o.__)try{if((s=o.constructor)&&s.getDerivedStateFromError!=null&&(o.setState(s.getDerivedStateFromError(t)),l=o.__d),o.componentDidCatch!=null&&(o.componentDidCatch(t,r||{}),l=o.__d),l)return o.__E=o}catch(c){t=c}throw t}},je=0,He=function(t){return t!=null&&t.constructor==null},F.prototype.setState=function(t,e){var i;i=this.__s!=null&&this.__s!==this.state?this.__s:this.__s=R({},this.state),typeof t=="function"&&(t=t(R({},i),this.props)),t&&R(i,t),t!=null&&this.__v&&(e&&this._sb.push(e),ke(this))},F.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),ke(this))},F.prototype.render=O,D=[],Be=typeof Promise=="function"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,ae=function(t,e){return t.__v.__b-e.__v.__b},J.__r=0,fe=0,le=Ee(!1),ce=Ee(!0);var Y,C,re,Re,he=0,Je=[],z=[],g=f,De=g.__b,Ae=g.__r,Le=g.diffed,Pe=g.__c,Ie=g.unmount,Ne=g.__;function Ye(t,e){g.__h&&g.__h(C,t,he||e),he=0;var i=C.__H||(C.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:z}),i.__[t]}function mt(t,e){var i=Ye(Y++,3);!g.__s&&Ze(i.__H,e)&&(i.__=t,i.i=e,C.__H.__h.push(i))}function Ke(t){return he=5,ee(function(){return{current:t}},[])}function ee(t,e){var i=Ye(Y++,7);return Ze(i.__H,e)?(i.__V=t(),i.i=e,i.__h=t,i.__V):i.__}function ft(){for(var t;t=Je.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(W),t.__H.__h.forEach(pe),t.__H.__h=[]}catch(e){t.__H.__h=[],g.__e(e,t.__v)}}g.__b=function(t){C=null,De&&De(t)},g.__=function(t,e){t&&e.__k&&e.__k.__m&&(t.__m=e.__k.__m),Ne&&Ne(t,e)},g.__r=function(t){Ae&&Ae(t),Y=0;var e=(C=t.__c).__H;e&&(re===C?(e.__h=[],C.__h=[],e.__.forEach(function(i){i.__N&&(i.__=i.__N),i.__V=z,i.__N=i.i=void 0})):(e.__h.forEach(W),e.__h.forEach(pe),e.__h=[],Y=0)),re=C},g.diffed=function(t){Le&&Le(t);var e=t.__c;e&&e.__H&&(e.__H.__h.length&&(Je.push(e)!==1&&Re===g.requestAnimationFrame||((Re=g.requestAnimationFrame)||_t)(ft)),e.__H.__.forEach(function(i){i.i&&(i.__H=i.i),i.__V!==z&&(i.__=i.__V),i.i=void 0,i.__V=z})),re=C=null},g.__c=function(t,e){e.some(function(i){try{i.__h.forEach(W),i.__h=i.__h.filter(function(r){return!r.__||pe(r)})}catch(r){e.some(function(o){o.__h&&(o.__h=[])}),e=[],g.__e(r,i.__v)}}),Pe&&Pe(t,e)},g.unmount=function(t){Ie&&Ie(t);var e,i=t.__c;i&&i.__H&&(i.__H.__.forEach(function(r){try{W(r)}catch(o){e=o}}),i.__H=void 0,e&&g.__e(e,i.__v))};var $e=typeof requestAnimationFrame=="function";function _t(t){var e,i=function(){clearTimeout(r),$e&&cancelAnimationFrame(e),setTimeout(t)},r=setTimeout(i,100);$e&&(e=requestAnimationFrame(i))}function W(t){var e=C,i=t.__c;typeof i=="function"&&(t.__c=void 0,i()),C=e}function pe(t){var e=C;t.__c=t.__(),C=e}function Ze(t,e){return!t||t.length!==e.length||e.some(function(i,r){return i!==t[r]})}var gt=Symbol.for("preact-signals");function ve(){if(L>1)L--;else{for(var t,e=!1;q!==void 0;){var i=q;for(q=void 0,ue++;i!==void 0;){var r=i.o;if(i.o=void 0,i.f&=-3,!(8&i.f)&&tt(i))try{i.c()}catch(o){e||(t=o,e=!0)}i=r}}if(ue=0,L--,e)throw t}}var m=void 0,q=void 0,L=0,ue=0,K=0;function Xe(t){if(m!==void 0){var e=t.n;if(e===void 0||e.t!==m)return e={i:0,S:t,p:m.s,n:void 0,t:m,e:void 0,x:void 0,r:e},m.s!==void 0&&(m.s.n=e),m.s=e,t.n=e,32&m.f&&t.S(e),e;if(e.i===-1)return e.i=0,e.n!==void 0&&(e.n.p=e.p,e.p!==void 0&&(e.p.n=e.n),e.p=m.s,e.n=void 0,m.s.n=e,m.s=e),e}}function x(t){this.v=t,this.i=0,this.n=void 0,this.t=void 0}x.prototype.brand=gt;x.prototype.h=function(){return!0};x.prototype.S=function(t){this.t!==t&&t.e===void 0&&(t.x=this.t,this.t!==void 0&&(this.t.e=t),this.t=t)};x.prototype.U=function(t){if(this.t!==void 0){var e=t.e,i=t.x;e!==void 0&&(e.x=i,t.e=void 0),i!==void 0&&(i.e=e,t.x=void 0),t===this.t&&(this.t=i)}};x.prototype.subscribe=function(t){var e=this;return we(function(){var i=e.value,r=m;m=void 0;try{t(i)}finally{m=r}})};x.prototype.valueOf=function(){return this.value};x.prototype.toString=function(){return this.value+""};x.prototype.toJSON=function(){return this.value};x.prototype.peek=function(){var t=m;m=void 0;try{return this.value}finally{m=t}};Object.defineProperty(x.prototype,"value",{get:function(){var t=Xe(this);return t!==void 0&&(t.i=this.i),this.v},set:function(t){if(t!==this.v){if(ue>100)throw new Error("Cycle detected");this.v=t,this.i++,K++,L++;try{for(var e=this.t;e!==void 0;e=e.x)e.t.N()}finally{ve()}}}});function et(t){return new x(t)}function tt(t){for(var e=t.s;e!==void 0;e=e.n)if(e.S.i!==e.i||!e.S.h()||e.S.i!==e.i)return!0;return!1}function nt(t){for(var e=t.s;e!==void 0;e=e.n){var i=e.S.n;if(i!==void 0&&(e.r=i),e.S.n=e,e.i=-1,e.n===void 0){t.s=e;break}}}function it(t){for(var e=t.s,i=void 0;e!==void 0;){var r=e.p;e.i===-1?(e.S.U(e),r!==void 0&&(r.n=e.n),e.n!==void 0&&(e.n.p=r)):i=e,e.S.n=e.r,e.r!==void 0&&(e.r=void 0),e=r}t.s=i}function P(t){x.call(this,void 0),this.x=t,this.s=void 0,this.g=K-1,this.f=4}(P.prototype=new x).h=function(){if(this.f&=-3,1&this.f)return!1;if((36&this.f)==32||(this.f&=-5,this.g===K))return!0;if(this.g=K,this.f|=1,this.i>0&&!tt(this))return this.f&=-2,!0;var t=m;try{nt(this),m=this;var e=this.x();(16&this.f||this.v!==e||this.i===0)&&(this.v=e,this.f&=-17,this.i++)}catch(i){this.v=i,this.f|=16,this.i++}return m=t,it(this),this.f&=-2,!0};P.prototype.S=function(t){if(this.t===void 0){this.f|=36;for(var e=this.s;e!==void 0;e=e.n)e.S.S(e)}x.prototype.S.call(this,t)};P.prototype.U=function(t){if(this.t!==void 0&&(x.prototype.U.call(this,t),this.t===void 0)){this.f&=-33;for(var e=this.s;e!==void 0;e=e.n)e.S.U(e)}};P.prototype.N=function(){if(!(2&this.f)){this.f|=6;for(var t=this.t;t!==void 0;t=t.x)t.t.N()}};Object.defineProperty(P.prototype,"value",{get:function(){if(1&this.f)throw new Error("Cycle detected");var t=Xe(this);if(this.h(),t!==void 0&&(t.i=this.i),16&this.f)throw this.v;return this.v}});function rt(t){return new P(t)}function ot(t){var e=t.u;if(t.u=void 0,typeof e=="function"){L++;var i=m;m=void 0;try{e()}catch(r){throw t.f&=-2,t.f|=8,ye(t),r}finally{m=i,ve()}}}function ye(t){for(var e=t.s;e!==void 0;e=e.n)e.S.U(e);t.x=void 0,t.s=void 0,ot(t)}function bt(t){if(m!==this)throw new Error("Out-of-order effect");it(this),m=t,this.f&=-2,8&this.f&&ye(this),ve()}function H(t){this.x=t,this.u=void 0,this.s=void 0,this.o=void 0,this.f=32}H.prototype.c=function(){var t=this.S();try{if(8&this.f||this.x===void 0)return;var e=this.x();typeof e=="function"&&(this.u=e)}finally{t()}};H.prototype.S=function(){if(1&this.f)throw new Error("Cycle detected");this.f|=1,this.f&=-9,ot(this),nt(this),L++;var t=m;return m=this,bt.bind(this,t)};H.prototype.N=function(){2&this.f||(this.f|=2,this.o=q,q=this)};H.prototype.d=function(){this.f|=8,1&this.f||ye(this)};function we(t){var e=new H(t);try{e.c()}catch(i){throw e.d(),i}return e.d.bind(e)}var te,oe;function I(t,e){f[t]=e.bind(null,f[t]||function(){})}function Z(t){oe&&oe(),oe=t&&t.S()}function st(t){var e=this,i=t.data,r=N(i);r.value=i;var o=ee(function(){for(var s=e.__v;s=s.__;)if(s.__c){s.__c.__$f|=4;break}return e.__$u.c=function(){var l;!He(o.peek())&&((l=e.base)==null?void 0:l.nodeType)===3?e.base.data=o.peek():(e.__$f|=1,e.setState({}))},rt(function(){var l=r.value.value;return l===0?0:l===!0?"":l||""})},[]);return o.value}st.displayName="_st";Object.defineProperties(x.prototype,{constructor:{configurable:!0,value:void 0},type:{configurable:!0,value:st},props:{configurable:!0,get:function(){return{data:this}}},__b:{configurable:!0,value:1}});I("__b",function(t,e){if(typeof e.type=="string"){var i,r=e.props;for(var o in r)if(o!=="children"){var s=r[o];s instanceof x&&(i||(e.__np=i={}),i[o]=s,r[o]=s.peek())}}t(e)});I("__r",function(t,e){Z();var i,r=e.__c;r&&(r.__$f&=-2,(i=r.__$u)===void 0&&(r.__$u=i=function(o){var s;return we(function(){s=this}),s.c=function(){r.__$f|=1,r.setState({})},s}())),te=r,Z(i),t(e)});I("__e",function(t,e,i,r){Z(),te=void 0,t(e,i,r)});I("diffed",function(t,e){Z(),te=void 0;var i;if(typeof e.type=="string"&&(i=e.__e)){var r=e.__np,o=e.props;if(r){var s=i.U;if(s)for(var l in s){var c=s[l];c!==void 0&&!(l in r)&&(c.d(),s[l]=void 0)}else i.U=s={};for(var h in r){var d=s[h],u=r[h];d===void 0?(d=vt(i,h,u,o),s[h]=d):d.o(u,o)}}}t(e)});function vt(t,e,i,r){var o=e in t&&t.ownerSVGElement===void 0,s=et(i);return{o:function(l,c){s.value=l,r=c},d:we(function(){var l=s.value.value;r[e]!==l&&(r[e]=l,o?t[e]=l:l?t.setAttribute(e,l):t.removeAttribute(e))})}}I("unmount",function(t,e){if(typeof e.type=="string"){var i=e.__e;if(i){var r=i.U;if(r){i.U=void 0;for(var o in r){var s=r[o];s&&s.d()}}}}else{var l=e.__c;if(l){var c=l.__$u;c&&(l.__$u=void 0,c.d())}}t(e)});I("__h",function(t,e,i,r){(r<3||r===9)&&(e.__$f|=2),t(e,i,r)});F.prototype.shouldComponentUpdate=function(t,e){var i=this.__$u;if(!(i&&i.s!==void 0||4&this.__$f)||3&this.__$f)return!0;for(var r in e)return!0;for(var o in t)if(o!=="__source"&&t[o]!==this.props[o])return!0;for(var s in this.props)if(!(s in t))return!0;return!1};function N(t){return ee(function(){return et(t)},[])}function ne(t){var e=Ke(t);return e.current=t,te.__$f|=4,ee(function(){return rt(function(){return e.current()})},[])}const yt="green",wt="yellow-green",Ot="yellow",xt="orange",St="red",Oe={best:yt,good:wt,fair:Ot,bad:xt,worst:St,"N/A":"gray","Ω(n)":"yellow","Θ(n^2)":"red","O(n^2)":"red","O(1)":"green","Ω(n^2)":"red","Ω(n log(n))":"orange","Θ(n log(n))":"orange","O(n log(n))":"orange","O(n)":"yellow","O(log(n))":"yellow-green","Ω(nk)":"green","Θ(nk)":"green","O(nk)":"green","O(n + k)":"green","Ω(n + k)":"green","Θ(n + k)":"green","Θ((n log(n))^2)":"red","O(n(log(n))^2)":"red","O(k)":"yellow","Θ(1)":"green","Θ(log(n))":"yellow-green","Θ(n)":"yellow","O(V + E)":"gray"},Ct=[{name:"Big-O",notation:"O",description:"Represents an (upper) bound on the growth rate of a function or the maximum resource consumption of an algorithm.",note:"Associated with (worst-case) scenarios, indicating that the actual runtime will never exceed this upper limit.",simplified:"Order at Most <="},{name:"Big-Theta",notation:"Θ",description:"Represents a (tight) bound on the growth rate of a function or both the upper and lower bounds together.",note:"Associated with (average-case) scenarios, indicating that the actual runtime will consistently fall within this bound.",simplified:"Order Exactly =="},{name:"Big-Omega",notation:"Ω",description:"Represents a (lower) bound on the growth rate of a function or the minimum resource consumption of an algorithm.",note:"Associated with (best-case) scenarios, indicating that the actual runtime will never exceed this lower limit.",simplified:"Order at Least >="}],kt=[{name:"Constant",notation:"O(1)",description:"Constant time regardless of input size",level:"best"},{name:"Logarithmic",notation:"O(log n)",description:"Increases logarithmically with input size",level:"good"},{name:"Linear",notation:"O(n)",description:"Increases linearly with input size",level:"fair"},{name:"Linearithmic",notation:"O(n log n)",description:"Increases in proportion to the product of input size and its logarithm",level:"fair"},{name:"Quadratic",notation:"O(n^2)",description:"Increases quadratically with input size",level:"bad"},{name:"Cubic",notation:"O(n^3)",description:"Increases cubically with input size",level:"bad"},{name:"Exponential",notation:"O(2^n)",description:"Doubles with each additional element in input",level:"worst"},{name:"Factorial",notation:"O(n!)",description:"Grows factorially with input size",level:"worst"}],Tt=[{name:"Heap",description:"Uses a binary heap to extract the maximum (or minimum) element and place it in the sorted array.",time:{best:"Ω(n log(n))",average:"Θ(n log(n))",worst:"O(n log(n))"},space:{worst:"O(1)"}},{name:"Merge",description:"Divides the array, recursively sorts halves, and merges them.",time:{best:"Ω(n log(n))",average:"Θ(n log(n))",worst:"O(n log(n))"},space:{worst:"O(n)"}},{name:"Quick",description:"Chooses a pivot, partitions the array, and recursively sorts partitions.",time:{best:"Ω(n log(n))",average:"Θ(n log(n))",worst:"O(n^2)"},space:{worst:"O(log(n))"}},{name:"Tree",description:"A sorting algorithm that builds a binary search tree from the elements to be sorted, then traverses the tree to retrieve the elements in sorted order.",time:{best:"Ω(n log(n))",average:"Θ(n log(n))",worst:"O(n^2)"},space:{worst:"O(n)"}},{name:"Comb",description:"Improves upon bubble sort by using a gap sequence to eliminate turtles, or small values near the end of the list, which slows down the sorting process in bubble sort.",time:{best:"Ω(n log(n))",average:"Θ(n^2)",worst:"O(n^2)"},space:{worst:"O(1)"}},{name:"Shell",description:"Extension of insertion sort that allows the exchange of items that are far apart. It starts by sorting pairs of elements far apart from each other, then progressively reduces the gap between elements to be compared.",time:{best:"Ω(n log(n))",average:"Θ((n log(n))^2)",worst:"O(n(log(n))^2)"},space:{worst:"O(1)"}},{name:"Cube",description:"Operates by recursively dividing the array into sub-cubes, sorting each cube individually, and then merging them back together, offering a balance between time complexity and space complexity.",time:{best:"Ω(n)",average:"Θ(n log(n))",worst:"O(n log(n))"},space:{worst:"O(n)"}},{name:"Tim",description:"A hybrid sorting algorithm derived from merge sort and insertion sort, designed to perform well on real-world data and exploit existing order in the input sequence.",time:{best:"Ω(n)",average:"Θ(n log(n))",worst:"O(n log(n))"},space:{worst:"O(n)"}},{name:"Bubble",description:"Repeatedly compares adjacent elements and swaps them if they are in the wrong order.",time:{best:"Ω(n)",average:"Θ(n^2)",worst:"O(n^2)"},space:{worst:"O(1)"}},{name:"Insertion",description:"Builds the final sorted array one element at a time by inserting each element into its position.",time:{best:"Ω(n)",average:"Θ(n^2)",worst:"O(n^2)"},space:{worst:"O(1)"}},{name:"Selection",description:"Finds the smallest (or largest) element and places it at the beginning (or end) of the array.",time:{best:"Ω(n^2)",average:"Θ(n^2)",worst:"O(n^2)"},space:{worst:"O(1)"}},{name:"Bucket",description:"Divides the input array into a number of buckets, each of which is then sorted individually, typically with another sorting algorithm or by recursively applying bucket sort.",time:{best:"Ω(n + k)",average:"Θ(n + k)",worst:"O(n^2)"},space:{worst:"O(n)"}},{name:"Counting",description:"An integer sorting algorithm that works by determining the number of objects having distinct key values and using arithmetic to determine their position in the output array.",time:{best:"Ω(n + k)",average:"Θ(n + k)",worst:"O(n + k)"},space:{worst:"O(k)"}},{name:"Radix",description:"Sorts based on individual digits or characters, from least to most significant.",time:{best:"Ω(nk)",average:"Θ(nk)",worst:"O(nk)"},space:{worst:"O(n + k)"}}],Et=[{name:"Linear",description:"Sequentially checks each element in a list until a match is found.",average:"Θ(n)",worst:"O(n)"},{name:"Binary",description:"Efficiently locates a target value within a sorted array by repeatedly dividing the search interval in half.",average:"Θ(log n)",worst:"O(log n)"}],Rt=[{name:"Depth-First",description:"Traverses as far as possible along each branch before backtracking.",average:"Θ(v + e)",worst:"O(v + e)"},{name:"Breadth-First",description:"Explores all neighbor nodes at the present depth prior to moving on to nodes at the next depth level.",average:"Θ(v + e)",worst:"O(v + e)"},{name:"Bellman-Ford",description:"Finds the shortest path from a single source vertex to all other vertices in a weighted graph, including negative edge weights.",average:"Θ(v * e)",worst:"O(v * e)"},{name:"Dijkstra's",description:"Finds the shortest path from a single source vertex to all other vertices in a weighted graph, with non-negative edge weights.",average:"Θ((v + e) log v)",worst:"O((v + e) log v)"},{name:"A-Star (A*)",description:"An informed search algorithm that uses a heuristic to estimate the cost of reaching the goal, combining the cost to reach the current node and the estimated cost to reach the goal.",average:"Θ(b ^ d)",worst:"O(b ^ d)"}],Me={array:Et,graph:Rt},Dt=[{name:"Array",shape:"Array.png",group:"List",description:"A collection of elements, each identified by an index or a key",time:{average:{access:"Θ(1)",search:"Θ(n)",insertion:"Θ(n)",deletion:"Θ(n)"},worst:{access:"O(1)",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n)"}},{name:"Stack",shape:"Stack.png",group:"List",description:"Follows the Last-In-First-Out (LIFO) principle",time:{average:{access:"Θ(n)",search:"Θ(n)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"O(n)",search:"O(n)",insertion:"O(1)",deletion:"O(1)"}},space:{worst:"O(n)"}},{name:"Queue",shape:"Queue.png",group:"List",description:"Follows the First-In-First-Out (FIFO) principle",time:{average:{access:"Θ(n)",search:"Θ(n)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"O(n)",search:"O(n)",insertion:"O(1)",deletion:"O(1)"}},space:{worst:"O(n)"}},{name:"Single-Linked-List",shape:"Single-Linked-List.png",group:"List",description:"Consists of nodes, each containing data and a reference to the next node. It allows efficient insertion and deletion at the head or tail",time:{average:{access:"Θ(n)",search:"Θ(n)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"O(n)",search:"O(n)",insertion:"O(1)",deletion:"O(1)"}},space:{worst:"O(n)"}},{name:"Double-Linked-List",shape:"Double-Linked-List.png",group:"List",description:"Extends the single-linked list by having references to both the next and previous nodes. It enables bidirectional traversal",time:{average:{access:"Θ(n)",search:"Θ(n)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"O(n)",search:"O(n)",insertion:"O(1)",deletion:"O(1)"}},space:{worst:"O(n)"}},{name:"Skip-List",shape:"Skip-List.png",group:"List",description:"Probabilistic data structure, it uses multiple levels of linked lists",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(n)",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n log(n))"}},{name:"Binary-Search-Tree",shape:"Binary-AVL-Tree.png",group:"Tree",description:"Consists of nodes, each having at most two children",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(n)",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n)"}},{name:"Cartesian-Tree",shape:"Cartesian-Tree.png",group:"Tree",description:"Binary tree where the values of nodes satisfy the heap property with respect to both the parent and the child",time:{average:{access:"N/A",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"N/A",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n)"}},{name:"B-Tree",shape:"B-Tree.png",group:"Tree",description:"Self-balancing tree structure that maintains sorted data and is commonly used in databases and file systems",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(log(n))",search:"O(log(n))",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"Red-Black-Tree",shape:"Red-Black-Tree.png",group:"Tree",description:"Self-balancing binary search tree that maintains balance through color-coded nodes",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(log(n))",search:"O(log(n))",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"Splay-Tree",shape:"Splay-Tree.png",group:"Tree",description:"Self-adjusting binary search tree. It reorganizes itself during operations to improve access times for frequently accessed nodes",time:{average:{access:"N/A",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"N/A",search:"O(log(n))",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"AVL-Tree",shape:"Binary-AVL-Tree.png",group:"Tree",description:"Self-balancing binary search tree. It ensures that the height difference between left and right subtrees is at most one",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(log(n))",search:"O(log(n))",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"KD-Tree",shape:"KD-Tree.png",group:"Tree",description:"Binary tree used for efficient multidimensional data search. It partitions space into regions based on data points",time:{average:{access:"Θ(log(n))",search:"Θ(log(n))",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(n)",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n)"}},{name:"Min-Heap",shape:"Min-Heap.png",group:"Tree",description:"The parent is less than or equal to its children",time:{average:{access:"Θ(1)",search:"Θ(n)",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(1)",search:"O(n)",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"Max-Heap",shape:"Max-Heap.png",group:"Tree",description:"The parent is greater than or equal to its children",time:{average:{access:"Θ(1)",search:"Θ(n)",insertion:"Θ(log(n))",deletion:"Θ(log(n))"},worst:{access:"O(1)",search:"O(n)",insertion:"O(log(n))",deletion:"O(log(n))"}},space:{worst:"O(n)"}},{name:"Hash-Table",shape:"Hash-Table.png",group:"Other",description:"Uses a hash function to map keys to indices in an array",time:{average:{access:"N/A",search:"Θ(1)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"N/A",search:"O(n)",insertion:"O(n)",deletion:"O(n)"}},space:{worst:"O(n)"}},{name:"Graph",shape:"Graph.png",group:"Other",description:"Consists of nodes connected by edges",time:{average:{access:"Θ(1)",search:"Θ(V + E)",insertion:"Θ(1)",deletion:"Θ(1)"},worst:{access:"O(1)",search:"O(V + E)",insertion:"O(1)",deletion:"O(1)"}},space:{worst:"O(V + E)"}}],At=[{name:"Object",description:"An instance of a class that encapsulates data and behavior."},{name:"Class",description:"A blueprint for creating objects, defining their attributes (data) and methods (behavior)."},{name:"Inheritance",description:"A mechanism in OOP that allows a class to inherit properties and behaviors from another class, promoting code reusability and establishing a parent-child relationship."},{name:"Polymorphism",description:"The ability for objects of different classes to be treated as objects of a common superclass, enabling methods to be invoked dynamically based on the type of object."},{name:"Abstraction",description:"The process of hiding complex implementation details and exposing only the essential features of an object, making it easier to understand and use."},{name:"Encapsulation",description:"The bundling of data and methods within a class, restricting access to the internal state of an object and promoting data integrity by controlling how data is accessed and modified."}],Lt=[{name:"Single Responsibility",description:"A class should have only one reason to change, meaning it should have only one responsibility or job."},{name:"Open / Closed",description:"Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification, allowing new functionality to be added without altering existing code."},{name:"Liskov Substitution",description:"Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program."},{name:"Interface Segregation",description:"Clients should not be forced to depend on interfaces they do not use. Instead, interfaces should be specific to the needs of the client."},{name:"Dependency Inversion",description:"High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details; details should depend on abstractions."}],Pt=[{name:"Singleton",description:"Ensures that a class has only one instance and provides a global point of access to that instance."},{name:"Factory Method",description:"Defines an interface for creating an object but allows subclasses to alter the type of objects that will be created."},{name:"Abstract Factory",description:"Provides an interface for creating families of related or dependent objects without specifying their concrete classes."},{name:"Builder",description:"Separates the construction of a complex object from its representation, allowing the same construction process to create different representations."},{name:"Prototype",description:"Creates new objects by copying an existing object, typically used when the creation of a new instance is more efficient than creating it from scratch or with initial parameters."},{name:"Adapter",description:"Allows incompatible interfaces to work together by providing a bridge between them."},{name:"Decorator",description:"Attaches additional responsibilities to an object dynamically, providing a flexible alternative to subclassing for extending functionality."},{name:"Observer",description:"Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."},{name:"Strategy",description:"Defines a family of algorithms, encapsulates each one, and makes them interchangeable."},{name:"Command",description:"Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations."}],It=[{name:"Procedural Programming",description:"Focuses on procedures or routines to execute a series of computational steps."},{name:"Object-Oriented Programming (OOP)",description:"Organizes software design around objects that encapsulate data and behavior."},{name:"Functional Programming",description:"Emphasizes the use of pure functions and immutable data to model computation."},{name:"Imperative Programming",description:"Specifies a series of statements that change a program's state."},{name:"Declarative Programming",description:"Describes what the program should accomplish rather than how to achieve it, allowing for a more abstract approach."},{name:"Event-Driven Programming",description:"Relies on events triggered by user actions or system events to determine program flow."},{name:"Aspect-Oriented Programming (AOP)",description:"Separates cross-cutting concerns (such as logging or security) from the main application logic."},{name:"Service-Oriented Architecture (SOA)",description:"Designs software as a collection of services that communicate through standardized protocols."},{name:"Microservices Architecture",description:"Breaks down applications into small, independently deployable services that work together."},{name:"Component-Based Architecture",description:"Constructs software from reusable, self-contained components with well-defined interfaces."},{name:"Model-View-Controller (MVC)",description:"Separates the application into three interconnected components: Model (data), View (user interface), and Controller (logic)."},{name:"Model-View-ViewModel (MVVM)",description:"A variation of MVC where the ViewModel mediates communication between the View and Model."},{name:"Model-Driven Architecture (MDA)",description:"Focuses on models as the primary artifacts of the development process, generating code from these models."},{name:"Domain-Driven Design (DDD)",description:"Centers software design around a rich understanding of the domain and domain logic."},{name:"Event Sourcing",description:"Stores all changes to application state as a sequence of events, allowing for easy replay and auditing."},{name:"CQRS (Command Query Responsibility Segregation)",description:"Separates read and write operations for data storage, optimizing each for its specific purpose."},{name:"Actor Model",description:"Models concurrent computation as a collection of actors that communicate via asynchronous messages."},{name:"Reactive Programming",description:"Deals with asynchronous data streams and the propagation of changes, allowing for reactive and scalable systems."},{name:"Service-Oriented Integration (SOI)",description:"Integrates software systems using services exposed via well-defined interfaces."},{name:"Distributed Computing",description:"Designs software to run across multiple interconnected computers, enabling scalability and fault tolerance."}],Nt=[{name:"Modularity",description:"Divide the software into separate modules to enhance maintainability, reusability, and scalability."},{name:"Decoupling",description:"Minimize dependencies between modules or components to improve flexibility and facilitate easier updates or replacements."},{name:"SoC (Separation of Concerns)",description:"Divide a software system into distinct sections, each addressing a separate concern, to improve readability and maintainability."},{name:"KISS (Keep It Simple, Stupid)",description:"Strive for simplicity in design and implementation, avoiding unnecessary complexity that can lead to confusion and maintenance difficulties."},{name:"DRY (Don't Repeat Yourself)",description:"Eliminate redundancy in code by abstracting common functionalities into reusable components, reducing the risk of errors and improving maintainability."},{name:"YAGNI (You Aren't Gonna Need It)",description:"Avoid implementing features or functionalities until they are actually needed, preventing unnecessary complexity and over-engineering."},{name:"Fail-Fast",description:"Detect and report errors as soon as possible to prevent them from propagating and causing further issues, facilitating faster debugging and resolution."},{name:"Convention Over Configuration",description:"Use sensible defaults and conventions to minimize the need for explicit configuration, promoting consistency and reducing cognitive load."}],M={oop:At,solid:Lt,design:Pt,paradigms:It,principles:Nt},$t=[{title:"PEP 8 (Style Guide)",notes:"black | isort | pylint | mypy | pyright | ruff"},{title:"PEP 484",notes:"Type Hints"},{title:"Immutables",notes:"tuple | frozenset | int | float | str | bool"},{title:"Testing",notes:"pytest"},{title:"Dependency Manager",notes:"pip | pdm | conda | poetry"},{title:"Virtual Environments",notes:"venv"}],Mt=[{index:1,description:"Beautiful is better than ugly."},{index:2,description:"Explicit is better than implicit."},{index:3,description:"Simple is better than complex."},{index:4,description:"Complex is better than complicated."},{index:5,description:"Flat is better than nested."},{index:6,description:"Sparse is better than dense."},{index:7,description:"Readability counts."},{index:8,description:"Special cases aren't special enough to break the rules."},{index:9,description:"Although practicality beats purity."},{index:10,description:"Errors should never pass silently."},{index:11,description:"Unless explicitly silenced."},{index:12,description:"In the face of ambiguity, refuse the temptation to guess."},{index:13,description:"There should be one-- and preferably only one --obvious way to do it."},{index:14,description:"Although that way may not be obvious at first unless you're Dutch."},{index:15,description:"Now is better than never."},{index:16,description:"Although never is often better than *right* now."},{index:17,description:"If the implementation is hard to explain, it's a bad idea."},{index:18,description:"If the implementation is easy to explain, it may be a good idea."},{index:19,description:"Namespaces are one honking great idea -- let's do more of those!"}],Ft=[{method:"__new__",description:"Creates a new instance of a class."},{method:"__init__",description:"Initializes an object when it is created."},{method:"__call__",description:"Enables objects to be called like functions."},{method:"__dir__",description:"Returns the attributes of a class."},{method:"__repr__",description:"Returns an unambiguous string representation of the object."},{method:"__str__",description:"Returns a readable string representation of the object."},{method:"__len__",description:"Returns the length of the object."},{method:"__getitem__",description:"Enables indexing and slicing operations."},{method:"__setitem__",description:"Enables setting values using indexing."},{method:"__delitem__",description:"Enables deletion of items using indexing."},{method:"__iter__",description:"Returns an iterator object for iteration."},{method:"__next__",description:"Retrieves the next item in the iteration sequence."},{method:"__enter__",description:"Sets up the context for a with statement."},{method:"__exit__",description:"Cleans up resources when the with statement exits."},{method:"__getattr__",description:"Handles attribute access when an attribute is not found."},{method:"__setattr__",description:"Handles setting attribute values."},{method:"__delattr__",description:"Handles deletion of attributes."},{method:"__eq__",description:"Defines equality comparison."},{method:"__ne__",description:"Defines inequality comparison."},{method:"__lt__",description:"Defines less than comparison."},{method:"__gt__",description:"Defines greater than comparison."},{method:"__le__",description:"Defines less than or equal to comparison."},{method:"__ge__",description:"Defines greater than or equal to comparison."},{method:"__del__",description:"Cleans up resources when an object is about to be destroyed."},{method:"__hash__",description:"Returns the hash value of the object."}],xe={others:$t,zen:Mt,magic:Ft},qt=[{method:"functools.partial(function, *args, **keywords)",description:"Returns a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords."},{method:"functools.wraps(function)",description:"Decorator used to update the metadata (such as __name__, __doc__) of the wrapper function to look more like the wrapped function."},{method:"functools.reduce(function, iterable)",description:"Applies function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value."},{method:"functools.lru_cache(maxsize=None, typed=False)",description:"Decorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments."}],jt=[{method:"zip(*iterables, strict=False)",description:"Returns an iterator that aggregates elements from each of the iterables. It continues until the shortest iterable is exhausted, and if strict is True, raises a ValueError if the iterables are of unequal length."},{method:"any(iterable)",description:"Returns True if at least one element in the iterable is True. Otherwise, returns False."},{method:"all(iterable)",description:"Returns True if all elements in the iterable are True, or if the iterable is empty. Otherwise, returns False."},{method:"enumerate(iterable, start=0)",description:"Returns an iterator that yields tuples containing an index and the value of each item in the iterable. The index starts at the specified start value (default is 0)."},{method:"map(function, iterable, *iterables)",description:"Returns an iterator that applies the specified function to each item in the iterable(s) and yields the result. If multiple iterables are passed, the function is called with corresponding items from each iterable."}],Ht=[{method:"itertools.product(*iterables, repeat=1)",description:"Returns the Cartesian product of the input iterables, yielding tuples containing elements from each iterable."},{method:"itertools.permutations(iterable, r=None)",description:"Returns all possible r-length tuples of elements from the iterable."},{method:"itertools.combinations(iterable, r)",description:"Returns all possible r-length combinations of elements from the iterable."},{method:"itertools.combinations_with_replacement(iterable, r)",description:"Returns all possible r-length combinations of elements from the iterable, allowing individual elements to be repeated."},{method:"itertools.accumulate(iterable, func=operator.add)",description:"Returns an iterator that produces accumulated sums (or other binary functions) of the elements."},{method:"itertools.groupby(iterable, key=None)",description:"Returns an iterator that generates tuples of a key and an iterator of grouped items from the input iterable. The key function defaults to None for a simple grouping based on the identity of the items."}],Bt=[{method:"collections.Counter",description:"A dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values."},{method:"collections.OrderedDict",description:"A dict subclass that maintains the order of insertion of its keys."},{method:"collections.ChainMap",description:"A class for quickly combining several mappings into one single mapping."},{method:"collections.defaultdict",description:"A subclass of the built-in dict class that returns a default value when a non-existent key is accessed."},{method:"collections.namedtuple",description:"A factory function for creating tuple subclasses with named fields, which increases code readability and maintainability."}],Ut=[{method:"random.random()",description:"Returns a random floating point number in the range (0.0, 1.0)."},{method:"random.randint(a, b)",description:"Returns a random integer between a and b (inclusive)."},{method:"random.choice(seq)",description:"Returns a random element from the non-empty sequence."},{method:"random.shuffle(seq)",description:"Randomly shuffles the elements of the sequence in place."},{method:"random.sample(seq, k)",description:"Returns a list of k unique elements chosen randomly from the population sequence or set."},{method:"random.randrange(start, stop, step)",description:"Returns a randomly selected element from the range(start, stop, step)."}],Vt=[{method:"abs(x)",description:"Returns the absolute value of x."},{method:"min(iterable)",description:"Returns the smallest item in the iterable."},{method:"max(iterable)",description:"Returns the largest item in the iterable."},{method:"pow(x, y)",description:"Returns x raised to the power of y."},{method:"divmod(x, y)",description:"Returns the quotient and remainder of the division of x by y."},{method:"math.ceil(x)",description:"Returns the smallest integer greater than or equal to x."},{method:"math.floor(x)",description:"Returns the largest integer less than or equal to x."},{method:"math.sqrt(x)",description:"Returns the square root of x."},{method:"math.sin(x)",description:"Returns the sine of x (in radians)."},{method:"math.cos(x)",description:"Returns the cosine of x (in radians)."},{method:"math.tan(x)",description:"Returns the tangent of x (in radians)."},{method:"statistics.mean(iterable)",description:"Returns the arithmetic mean of the iterable."},{method:"statistics.median(iterable)",description:"Returns the median (middle value) of the iterable."}],Fe={functools:qt,iterables:jt,itertools:Ht,collections:Bt,random:Ut,numeric:Vt},Gt=[{name:"POST",description:"Create"},{name:"GET",description:"Read"},{name:"PUT",description:"Update"},{name:"PATCH",description:"Specific-Update"},{name:"DELETE",description:"Delete"}],Qt=[{name:"Client-Server (Decoupling)",description:"Separation of concerns between the client and server, allowing them to evolve independently and improve scalability, reliability, and portability."},{name:"Stateless",description:"Each request from the client to the server must contain all the information necessary to understand and fulfill the request, meaning no client context is stored on the server between requests."},{name:"Cacheability",description:"Responses must define themselves as cacheable or non-cacheable, improving efficiency, scalability, and user-perceived performance through the use of caching."},{name:"Uniform Interface",description:"A uniform and standardized way of interacting with resources through well-defined operations (HTTP methods) and resource representations (media types)."},{name:"Layered System",description:"A hierarchical system where intermediaries (proxies, gateways, etc.) can be used to improve scalability, security, and encapsulation by providing additional layers of abstraction."},{name:"Code-On-Demand (Optional)",description:"Servers can temporarily extend the functionality of a client by transferring executable code (e.g., JavaScript) within a response, enhancing flexibility and reducing client-server coupling."}],zt=[{name:"Schema",description:"Defines the structure of the data in the GraphQL API, including types, fields, and relationships."},{name:"Query",description:"Defines how clients can fetch data from the GraphQL server. Queries are used to retrieve data from the server."},{name:"Mutation",description:"Defines how clients can modify data on the GraphQL server. Mutations are used to create, update, or delete data."},{name:"Subscription",description:"Defines how clients can subscribe to real-time data updates from the GraphQL server. Subscriptions allow clients to receive data as it changes."},{name:"Resolver",description:"Functions that define how GraphQL fields are resolved. Resolvers are responsible for fetching the data associated with each field."},{name:"Scalar",description:"Primitive data types in GraphQL that represent single values, such as integers, strings, booleans, and floats."},{name:"Type",description:"Composite data types in GraphQL that represent complex objects with multiple fields. Object types define the structure of the data returned by queries and mutations."},{name:"Input",description:"Similar to object types, input types represent complex input data for mutations. Input types define the structure of the data that clients can provide when executing mutations."},{name:"Enum",description:"An enumeration type in GraphQL that represents a predefined set of possible values. Enums are used to define a specific domain of valid options for a field."},{name:"Union",description:"A type in GraphQL that represents a combination of one or more object types. Unions allow for flexibility in query responses by allowing a field to return different types of objects."},{name:"Interface",description:"A type in GraphQL that defines a common set of fields that multiple object types can implement. Interfaces enable polymorphism and ensure consistent field structures across related types."}],se={rest_methods:Gt,rest_constraints:Qt,graphql:zt},Wt=[{statement:"WHERE",description:"Filters rows based on a specified condition.",example:"SELECT * FROM table_name WHERE condition_1;"},{statement:"AND",description:"Combines multiple conditions in a WHERE clause, requiring all to be true.",example:"SELECT * FROM table_name WHERE condition_1 AND condition_2;"},{statement:"OR",description:"Combines multiple conditions in a WHERE clause, requiring at least one to be true.",example:"SELECT * FROM table_name WHERE condition_1 OR condition_2;"},{statement:"LIMIT",description:"Limits the number of rows returned by a query.",example:"SELECT * FROM table_name LIMIT 10;"},{statement:"GROUP BY",description:"Groups rows that have the same values into summary rows.",example:"SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;"},{statement:"ORDER BY",description:"Sorts the result set by specified columns (ASC or DESC).",example:"SELECT * FROM table_name ORDER BY column_name ASC|DESC;"},{statement:"COUNT",description:"Counts the number of rows in a specified column or all rows.",example:"SELECT COUNT(*) FROM table_name;"},{statement:"AS",description:"Aliases are used to rename a table or column in a SQL query result.",example:"SELECT column_name AS alias_name FROM table_name;"},{statement:"INNER JOIN",description:"Returns records that have matching values in both tables.",example:"SELECT * FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;"},{statement:"LEFT JOIN",description:"Returns all records from the left table and the matched records from the right table.",example:"SELECT * FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;"},{statement:"RIGHT JOIN",description:"Returns all records from the right table and the matched records from the left table.",example:"SELECT * FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;"},{statement:"FULL JOIN",description:"Returns all records when there is a match in either left or right table.",example:"SELECT * FROM table1 FULL JOIN table2 ON table1.column_name = table2.column_name;"}],Jt=[{title:"Cracking the Coding Interview",url:"https://www.crackingthecodinginterview.com/"},{title:"Big-O Cheat-Sheet",url:"https://www.bigocheatsheet.com/"},{title:"Big-O Cheat-Sheet IO",url:"https://www.bigocheatsheet.com/"},{title:"Python: PEP-8",url:"https://peps.python.org/pep-0008"},{title:"Python: PEP-20",url:"https://peps.python.org/pep-0020"},{title:"Python: PEP-484",url:"https://peps.python.org/pep-0484/"},{title:"Python: Heap",url:"https://docs.python.org/3/library/heapq.html#module-heapq"},{title:"Python: Binary Search & Insertion",url:"https://docs.python.org/3/library/bisect.html#module-bisect"},{title:"Python: Specialized Container Data-Types",url:"https://docs.python.org/3/library/collections.html#module-collections"},{title:"Python: Queue FIFO & Stack LIFO",url:"https://docs.python.org/3/library/queue.html#module-queue"},{title:"Python: Deque (Queue + Stack)",url:"https://docs.python.org/3/library/collections.html#collections.deque"},{title:"Python: Built-in",url:"https://docs.python.org/3/library/functions.html"},{title:"Python: Functools",url:"https://docs.python.org/3/library/functools.html"},{title:"Python: Collections",url:"https://docs.python.org/3/library/collections.html"},{title:"Python: Itertools",url:"https://docs.python.org/3/library/itertools.html"},{title:"Python: Random",url:"https://docs.python.org/3/library/random.html"},{title:"Python: Math",url:"https://docs.python.org/3/library/math.html"}];var Yt=0;function n(t,e,i,r,o,s){var l,c,h={};for(c in e)c=="ref"?l=e[c]:h[c]=e[c];var d={type:t,props:h,key:i,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:--Yt,__i:-1,__u:0,__source:o,__self:s};if(typeof t=="function"&&(l=t.defaultProps))for(c in l)h[c]===void 0&&(h[c]=l[c]);return f.vnode&&f.vnode(d),d}function me(t){return n("div",{class:"note-box",children:[n("div",{class:"note-title",children:t.title||"Note"}),n("span",{class:"note-text",children:t.children})]})}function b(t){return n("div",{class:"title-bar",children:[n("span",{class:"title",children:t.text}),t.children]})}const qe=t=>{const e=Ke(null);return mt(()=>{e.current&&hljs.highlightBlock(e.current)},[t.text]),n("pre",{children:n("code",{ref:e,className:`language-${t.lang}`,children:t.text})})};function Kt(){return n("img",{src:"./big-o-chart.png"})}function Zt(){const t=Ct.map(r=>n("tr",{children:[n("td",{children:r.name}),n("td",{children:r.notation}),n("td",{class:"tal",children:r.description}),n("td",{children:r.simplified}),n("td",{class:"tal",children:r.note})]})),e=r=>n("td",{class:`${Oe[r.item]}`,children:r.name||r.item}),i=kt.map(r=>n("tr",{children:[n("td",{children:r.name}),n(e,{name:r.notation,item:r.level}),n("td",{class:"tal",children:r.description}),n(e,{item:r.level})]}));return n(O,{children:[n(b,{text:"Asymptotic Notations"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 100px",children:"Name"}),n("th",{children:"Notation"}),n("th",{children:"Description"}),n("th",{style:"width: 120px",children:"Simplified"}),n("th",{children:"Note"})]})}),n("tbody",{children:t})]}),n(me,{children:["Asymptotic notations like ",n("strong",{children:"Big O"}),","," ",n("strong",{children:"Big Omega"})," and ",n("strong",{children:"Big Theta"}),", provide insights into the runtime performance characteristics of algorithms.",n("br",{}),"On the other hand, terms like ",n("strong",{children:"Best Case"}),","," ",n("strong",{children:"Worst Case"})," and ",n("strong",{children:"Expected Case"})," describe the algorithm's performance under specific conditions or input.",n("br",{}),"Please note that there is"," ",n("strong",{children:"no specific relationship between these two concepts"}),"."]}),n("br",{}),n(b,{text:"Time & Space Complexities"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{children:"Name"}),n("th",{children:"Notation"}),n("th",{children:"Description"}),n("th",{children:"Quality"})]})}),n("tbody",{children:i})]}),n(me,{children:[n("strong",{children:"Log(n)"})," without a specified base, it's usually assumed to be ",n("strong",{children:"base 2"}),"."]}),n("br",{}),n("div",{class:"tac",children:[n("div",{class:"title-bar",style:"justify-content:center;",children:n("span",{class:"title",children:"Visual Chart"})}),n(Kt,{})]})]})}function Xt(){const t=N(""),e=ne(()=>Dt.filter(s=>s.name.toLowerCase().includes(t.value.toLowerCase())||s.group.toLowerCase().includes(t.value.toLowerCase()))),i=s=>n("td",{class:`${Oe[s.item]}`,children:s.item}),r=e.value.map(s=>n("tr",{children:[n("td",{children:s.name}),n("td",{children:n("img",{class:"shape",src:`./shapes/${s.shape}`})}),n("td",{children:s.group}),n("td",{class:"tal",children:s.description}),n(i,{item:s.time.average.access}),n(i,{item:s.time.average.search}),n(i,{item:s.time.average.insertion}),n(i,{item:s.time.average.deletion}),n(i,{item:s.time.worst.access}),n(i,{item:s.time.worst.search}),n(i,{item:s.time.worst.insertion}),n(i,{item:s.time.worst.deletion}),n(i,{item:s.space.worst})]})),o=["Access","Search","Insertion","Deletion"].map(s=>n("th",{children:s}));return n(O,{children:[n(b,{text:"Data Structures",children:n("input",{onInput:s=>t.value=s.target.value,placeholder:"Search"})}),n("table",{children:[n("thead",{children:[n("tr",{children:[n("th",{colspan:4}),n("th",{colspan:8,children:"Time Complexity"}),n("th",{children:"Space Complexity"})]}),n("tr",{children:[n("th",{colspan:4}),n("th",{colspan:4,children:"Average"}),n("th",{colspan:4,children:"Worst"}),n("th",{children:"Worst"})]}),n("tr",{children:[n("th",{style:"width: 140px",children:"Data Structure"}),n("th",{style:"width: 100px",children:"Shape"}),n("th",{style:"width: 60px",children:"Group"}),n("th",{style:"width: 240px",children:"Description"}),o,o,n("th",{})]})]}),n("tbody",{children:r})]})]})}function en(){const t=N(""),e=ne(()=>Tt.filter(o=>o.name.toLowerCase().includes(t.value.toLowerCase()))),i=o=>n("td",{class:`${Oe[o.item]}`,children:o.item}),r=e.value.map(o=>n("tr",{children:[n("td",{children:o.name}),n("td",{class:"tal",style:"height: 60px",children:o.description}),n(i,{item:o.time.best}),n(i,{item:o.time.average}),n(i,{item:o.time.worst}),n(i,{item:o.space.worst})]}));return n(O,{children:[n(b,{text:"Sorting Algorithms",children:n("input",{onInput:o=>t.value=o.target.value,placeholder:"Search"})}),n("table",{children:[n("thead",{children:[n("tr",{children:[n("th",{colspan:2}),n("th",{colspan:3,children:"Time Complexity"}),n("th",{children:"Space Complexity"})]}),n("tr",{children:[n("th",{style:"width: 100px",children:"Algorithm"}),n("th",{style:"width: 600px",children:"Description"}),n("th",{children:"Best"}),n("th",{children:"Average"}),n("th",{children:"Worst"}),n("th",{children:"Worst"})]})]}),n("tbody",{children:r})]})]})}function tn(){const t=Me.array.map(i=>n("tr",{children:[n("td",{children:i.name}),n("td",{class:"tal",children:i.description}),n("td",{children:i.average}),n("td",{children:i.worst})]})),e=Me.graph.map(i=>n("tr",{children:[n("td",{children:i.name}),n("td",{class:"tal",children:i.description}),n("td",{children:i.average}),n("td",{children:i.worst})]}));return n(O,{children:[n(b,{text:"Array Search Operations"}),n("div",{children:n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 100px",children:"Algorithm"}),n("th",{children:"Description"}),n("th",{children:"Average Time Complexity"}),n("th",{children:"Worst Time Complexity"})]})}),n("tbody",{children:[t," "]})]})}),n("br",{}),n(b,{text:"Graph Search Operations"}),n("div",{style:"display: flex",children:[n("div",{children:n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 100px",children:"Algorithm"}),n("th",{children:"Description"}),n("th",{children:"Average Time Complexity"}),n("th",{children:"Worst Time Complexity"})]})}),n("tbody",{children:[e," "]})]})}),n("div",{class:"graph-help",style:"width: 440px",children:n("ul",{children:[n("li",{children:[n("code",{children:"v"}),": Number of vertices (nodes) in the graph."]}),n("li",{children:[n("code",{children:"e"}),": Number of edges in the graph."]}),n("li",{children:[n("code",{children:"b"}),": Branching factor of the search tree."]}),n("li",{children:[n("code",{children:"d"}),": Depth of the optimal solution."]})]})})]})]})}function nn(){const t=e=>n("tr",{children:[n("td",{children:e.name}),n("td",{class:"tal",children:e.description})]});return n(O,{children:[n(b,{text:"Object-Oriented Programming (OOP)"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 100px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:M.oop.map(t)})]}),n("br",{}),n(b,{text:"Solid Principles"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 160px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:M.solid.map(t)})]}),n("br",{}),n(b,{text:"Software Design Patterns"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 160px",children:"Pattern"}),n("th",{children:"Description"})]})}),n("tbody",{children:M.design.map(t)})]}),n("br",{}),n(b,{text:"Software Development Principles"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 260px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:M.principles.map(t)})]}),n("br",{}),n(b,{text:"Software Development Paradigms"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 360px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:M.paradigms.map(t)})]})]})}function rn(){return n(O,{children:[n("div",{style:"display: flex; ",children:[n("div",{children:[n(b,{text:"REST Architectural Constraints"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 200px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:se.rest_constraints.map(t=>n("tr",{children:[n("td",{children:t.name}),n("td",{class:"tal",children:t.description})]}))})]}),n(me,{children:[n("strong",{children:"REST"})," stands for"," ",n("strong",{children:"REpresentational State Transfer"})]})]}),n("div",{style:"margin-left: 30px;",children:[n(b,{text:"REST Methods"}),n("table",{style:"width:300px",children:[n("thead",{children:n("tr",{children:[n("th",{children:"Name"}),n("th",{children:"CRUD"})]})}),n("tbody",{children:se.rest_methods.map(t=>n("tr",{children:[n("td",{children:t.name}),n("td",{children:t.description})]}))})]})]})]}),n("br",{}),n("div",{children:[n(b,{text:"GraphQL"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 160px",children:"Name"}),n("th",{children:"Description"})]})}),n("tbody",{children:se.graphql.map(t=>n("tr",{children:[n("td",{children:t.name}),n("td",{class:"tal",children:t.description})]}))})]})]})]})}function on(){return n(O,{children:[n(b,{text:"SQL (Structured Query Language)"}),n(qe,{lang:"sql",text:"SELECT column_1, column_2 FROM table_name;"}),n("br",{}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 120px",children:"Statement"}),n("th",{children:"Description"}),n("th",{children:"Example"})]})}),n("tbody",{children:Wt.map(t=>n("tr",{children:[n("td",{children:t.statement}),n("td",{class:"tal",children:t.description}),n("td",{class:"tal",children:n(qe,{lang:"sql",text:t.example})})]}))})]})]})}function sn(){const t=N(""),e=ne(()=>xe.magic.filter(i=>i.method.toLowerCase().includes(t.value.toLowerCase())||i.description.toLowerCase().includes(t.value.toLowerCase())));return n(O,{children:[n(b,{text:"Dunder Methods",children:n("input",{onInput:i=>t.value=i.target.value,placeholder:"Search"})}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 110px",children:"Magic Method"}),n("th",{children:"Description"})]})}),n("tbody",{children:e.value.map(i=>n("tr",{children:[n("td",{children:i.method}),n("td",{class:"tal",children:i.description})]}))})]})]})}function an(){return n(O,{children:[n(b,{text:"PEP 20 – The Zen of Python"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 30px",children:"Index"}),n("th",{children:"Description"})]})}),n("tbody",{children:xe.zen.map(t=>n("tr",{children:[n("td",{children:t.index}),n("td",{class:"tal",children:t.description})]}))})]})]})}function ln(){return n(O,{children:[n(b,{text:"Useful Notes"}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 160px",children:"Title"}),n("th",{children:"Notes"})]})}),n("tbody",{children:xe.others.map(t=>n("tr",{children:[n("td",{children:t.title}),n("td",{class:"tal",children:t.notes})]}))})]})]})}function cn(){return n("div",{style:"display: flex; justify-content: space-between",children:[n("div",{children:n(sn,{})}),n("div",{children:n(an,{})}),n("div",{children:n(ln,{})})]})}function dn(){const t=[];Object.keys(Fe).forEach(r=>{Fe[r].forEach(o=>{t.push({method:o.method,group:r,description:o.description})})});const e=N(""),i=ne(()=>t.filter(r=>r.method.toLowerCase().includes(e.value.toLowerCase())||r.group.toLowerCase().includes(e.value.toLowerCase())||r.description.toLowerCase().includes(e.value.toLowerCase())));return n(O,{children:[n(b,{text:"Common Methods",children:n("input",{onInput:r=>e.value=r.target.value,placeholder:"Search"})}),n("table",{children:[n("thead",{children:n("tr",{children:[n("th",{style:"width: 380px",children:"Method"}),n("th",{children:"Group"}),n("th",{children:"Description"})]})}),n("tbody",{children:i.value.map(r=>n("tr",{children:[n("td",{children:r.method}),n("td",{children:r.group}),n("td",{class:"tal",children:r.description})]}))})]})]})}function hn(){return n("div",{style:"display: flex; justify-content: space-between",children:n("div",{children:n(dn,{})})})}function pn(){return n(O,{children:[n("div",{class:"title-bar",children:n("span",{class:"title",children:"Resources Links"})}),n("ul",{class:"links",children:Jt.map(t=>n("li",{children:n("a",{href:t.url,target:"_blank",children:t.title})}))}),n("div",{children:[n("strong",{children:"Disclaimer:"})," The information in this website was gather with the help of ChatGPT and Copilot."]})]})}function un(){const t=N(0),e=(i,r)=>t.value===i?r:null;return n(O,{children:[n("ul",{class:"navbar",children:[n("li",{onClick:()=>t.value=0,children:"Big-O"}),n("li",{onClick:()=>t.value=1,children:"Data Structures"}),n("li",{onClick:()=>t.value=2,children:"Sorting"}),n("li",{onClick:()=>t.value=3,children:"Searching"}),n("li",{onClick:()=>t.value=4,children:"Principles & Design"}),n("li",{onClick:()=>t.value=5,children:"APIs"}),n("li",{onClick:()=>t.value=6,children:"SQL"}),n("li",{onClick:()=>t.value=7,children:"Python"}),n("li",{onClick:()=>t.value=8,children:"Python Extended"}),n("li",{onClick:()=>t.value=99,children:"Resources"}),n("li",{onClick:()=>window.open("https://github.com/hlop3z/interviews-python","_blank"),style:"float: right;",children:"GitHub"})]}),e(0,n(Zt,{})),e(1,n(Xt,{})),e(2,n(en,{})),e(3,n(tn,{})),e(4,n(nn,{})),e(5,n(rn,{})),e(6,n(on,{})),e(7,n(cn,{})),e(8,n(hn,{})),e(99,n(pn,{}))]})}ut(n(un,{}),document.getElementById("app"));
